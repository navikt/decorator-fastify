// vite.config.mjs
import { defineConfig } from "file:///Users/max/Work/decorator-fastify/node_modules/vite/dist/node/index.js";
import tsconfigPaths from "file:///Users/max/Work/decorator-fastify/node_modules/vite-tsconfig-paths/dist/index.mjs";
import minifyLiterals from "file:///Users/max/Work/decorator-fastify/node_modules/rollup-plugin-minify-html-literals-v3/dist/index.js";
import path2 from "path";
import { partytownRollup } from "file:///Users/max/Work/decorator-fastify/node_modules/@builder.io/partytown/utils/index.mjs";

// typesafe-css-modules.ts
import postcss from "file:///Users/max/Work/decorator-fastify/node_modules/postcss/lib/postcss.mjs";
import postcssModules from "file:///Users/max/Work/decorator-fastify/node_modules/postcss-modules/build/index.js";
import fs from "fs";
import path from "path";
import ts from "file:///Users/max/Work/decorator-fastify/node_modules/typescript/lib/typescript.js";
import * as prettier from "file:///Users/max/Work/decorator-fastify/node_modules/prettier/index.mjs";

// ../../.prettierrc.json
var prettierrc_default = {
  singleQuote: true
};

// typesafe-css-modules.ts
var __vite_injected_original_dirname = "/Users/max/Work/decorator-fastify/packages/client";
var targets = ["./", "../server/", "../shared/"];
var FILE_NAME = "./css-modules.d.ts";
async function processFile(path3) {
  var _a;
  const file = fs.readFileSync(path3, "utf-8");
  const val = await postcss([
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    postcssModules({
      getJSON: () => {
      }
    })
  ]).process(file.toString(), { from: path3 });
  const tokens = (_a = val.messages.find(
    ({ type, plugin }) => type === "export" && plugin === "postcss-modules"
  )) == null ? void 0 : _a.exportTokens;
  return {
    path: path3.split("/").pop(),
    tokens
  };
}
function createTSModule(file) {
  const tokenProperties = Object.keys(file.tokens).map(
    (token) => ts.factory.createPropertySignature(
      void 0,
      token,
      void 0,
      ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)
    )
  );
  const classes = ts.factory.createTypeLiteralNode(tokenProperties);
  const classesDeclaration = ts.factory.createVariableStatement(
    void 0,
    ts.factory.createVariableDeclarationList(
      [
        ts.factory.createVariableDeclaration(
          "classes",
          void 0,
          classes,
          void 0
        )
      ],
      ts.NodeFlags.Const
    )
  );
  const exportClassesStatement = ts.factory.createExportDefault(
    ts.factory.createIdentifier("classes")
  );
  const tsModule = ts.factory.createModuleDeclaration(
    [ts.factory.createModifier(ts.SyntaxKind.DeclareKeyword)],
    ts.factory.createStringLiteral(`*/${file.path}`),
    ts.factory.createModuleBlock([classesDeclaration, exportClassesStatement])
  );
  return tsModule;
}
async function createOutput(modules) {
  const printer = ts.createPrinter();
  const sourceFile = ts.createSourceFile(FILE_NAME, "", ts.ScriptTarget.ES2015);
  const output = modules.map((mod) => printer.printNode(ts.EmitHint.Unspecified, mod, sourceFile)).join("\n\n");
  const formatted = await prettier.format(output, {
    ...prettierrc_default,
    parser: "typescript"
  });
  return formatted;
}
async function processAll() {
  const root = path.resolve(__vite_injected_original_dirname, "./src/styles");
  const paths = fs.readdirSync(root).filter((path3) => path3.endsWith(".module.css")).map((p) => path.resolve(`${root}/${p}`));
  const processedFiles = await Promise.all(
    paths.map(async (f) => await processFile(f))
  );
  const modules = processedFiles.map(createTSModule);
  const output = await createOutput(modules);
  for (const target of targets) {
    fs.writeFileSync(path.resolve(target, FILE_NAME), output);
  }
}
var typedCssModulesPlugin = () => {
  return {
    name: "typed-css-modules",
    configResolved() {
      processAll();
    },
    handleHotUpdate(context) {
      const { file } = context;
      if (file.includes("module.css")) {
        processAll();
      }
    }
  };
};

// vite.config.mjs
var __vite_injected_original_dirname2 = "/Users/max/Work/decorator-fastify/packages/client";
var mainBundleConfig = defineConfig({
  plugins: [tsconfigPaths(), typedCssModulesPlugin()],
  server: {
    origin: "http://localhost:5173"
  },
  logLevel: "info",
  build: {
    minify: true,
    target: "es2015",
    manifest: true,
    rollupOptions: {
      output: {
        inlineDynamicImports: true,
        esModule: true
      },
      plugins: [
        minifyLiterals(),
        partytownRollup({
          dest: path2.join(__vite_injected_original_dirname2, "dist", "~partytown")
        })
      ],
      input: ["src/main.ts"]
    }
  }
});
var lazyConfig = defineConfig({
  build: {
    // Don't clear the output, we want to keep the main bundle
    emptyOutDir: false,
    minify: true,
    manifest: "analytics.manifest.json",
    rollupOptions: {
      input: ["src/analytics/analytics.ts"]
    }
  }
});
var vite_config_default = defineConfig(({ mode }) => {
  if (mode === "development") {
    return mainBundleConfig;
  }
  if (mode === "main")
    return mainBundleConfig;
  if (mode === "lazy")
    return lazyConfig;
  return mainBundleConfig;
});
export {
  vite_config_default as default,
  lazyConfig,
  mainBundleConfig
};
//# sourceMappingURL=data:application/json;base64,
